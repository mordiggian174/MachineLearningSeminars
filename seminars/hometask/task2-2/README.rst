####################
Домашнее задание 2-2
####################

Описание
========

В рамках данного задания требуется выполнить 5 задач. Каждая задача должна быть оформлена в виде отдельного task{1,2,3,4,5}.ipynb файла и tensorboard{1,2,3,4,5}.zip файла.
В каждом файле *.ipynb должно быть:

- построение архитектуры;
- выполнен процесс обучения;
- показан пример работы модели до обучения и после;

Файл .zip должен содержать результаты эксперимента в формате tensorboard для каждой из задач:

- для каждого набора параметров свой график зависимости качества от обучения (если требуется в задаче);
- примеры работы модели в процессе обучения модели.

Для каждой задачи должны быть представлены выводы:

- какой результат ожидали;
- какой не ожидали;
- что было не ясно.

Код и эксперимент должен быть понятным внешнему читателю:

- В коде должны быть коментарии;
- Названия переменных должно быть интерпретируемые.

P.S. Рекомендуется все вычисления проводить на google colab в режиме cuda.

P.S.S. Рекомендуется использовать backup моделей при обучении на google drive.

Задачи
======

Задача 1. Распознавания именованных сущностей на основе fasttext
----------------------------------------------------------------

Построить модель расспознавания именованных сущностей на русском языке. В качестве данных использовать выборку NERUS (NER).

- В качестве векторного представления токенов использовать fasttext модель;
- В качестве модели использовать модель LSTM;
- Архитектуру LSTM можно выбрать произвольным образом;
- Весь процесс обучения должен быть визуализирован в tensorboard (метрики качества и пример предсказания)

P.S. Выборку можно взять из `github <https://github.com/natasha/nerus>`_.

P.S.S. Для экономинии памяти компютера предлагается воспользоваться сжатием модели fasttext с 300-мерного к 100-мерному (на колаб не хватит оперативки на сжатие до 100-мерного вектора, поэтому работайте сразу с 300-мерными в VEC формате). А также использовать выполнить переопределения модели fasttext в VEC модель (см. sem-17).

Задача 2. Классификация даты документа
--------------------------------------

Построить модель для классификации даты (года) публикации новостной заметки из выборки lenta.ru.

- В качестве векторного представления текста рассмотреть тематический вектор.
- В качестве классификатора использовать любой классификатор на ваш выбор.
- Проанализировать качество классификации в зависимости от добавленных модальностей.
- Провести эксперимент по добавлению регуляризаторов.
- Провести анализ классификации модальности(год рассмотреть как модальность) при помощи встроенных методов bigartm.

P.S. Выборку можно взять из sem-19.

Задача 3. Posterior Sampling в задаче RL
----------------------------------------

Большая задача на разбор `статьи <https://arxiv.org/pdf/1306.0940.pdf>`_. Требуется решить проблемы "Задачи о заплыве" связанные с тем, что алгоритм не доходит до левого края и начинает всегда скатываться по течению.

P.S. Реализируйте метод Posterior Sampling из статьи.

P.S.S. Рекомендую посмотреть часть семинара sem-25 связаной с данной проблемой.
